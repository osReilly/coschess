    //当前已重连次数，超过上限则不再重连，彻底关闭连接    var curTryNum = 0;    var maxTryNum = 10;    var heartCheck = {    timeout: 5000, //计时器设定为5s    timeoutObj: null,    serverTimeoutObj: null,    //重置    reset: function() {        clearTimeout(this.timeoutObj);        this.start();    },    //开始    start: function() {        var self = this;        this.timeoutObj = setInterval(function() {            window.ws.send("");            console.log("发送心跳");        }, this.timeout);    }    };cc.Class({    extends: cc.Component,    properties: {    },    connect:function(url , options){         curTryNum = curTryNum + 1;        let self = this ;        this.ws = new WebSocket(url);        window.ws = this.ws;        this.ws.onopen = function (event) {           //连接成功时将当前已重连次数归零            curTryNum = 0;            console.log("Send Text WS was opened.");           console.log("心跳检测启动");           // heartCheck.start();        };        this.ws.onmessage = function (event) {            // 无论收到什么信息，说明当前连接正常，将心跳检测的计时器重置         //   heartCheck.reset();            var data = self.parse(event.data) ;            if(data!=null && data.event != null){                console.log(cc.beimi.event)                if(cc.beimi.event[data.event]){                    cc.beimi.event[data.event](event.data);                }                           }            console.log("response text msg: " + event.data);        };        this.ws.onerror = function (event) {            console.log("Send Text fired an error");            console.log("连接出错")        };        this.ws.onclose = function (event) {            console.log("WebSocket instance closed.");                if (curTryNum <= maxTryNum) {                    console.log("连接关闭，5秒后重新连接……");                    // 5秒后重新连接，实际效果：每5秒重连一次，直到连接成功                    setTimeout(function () {                        self.connect(url);                    }, 5000);                } else {                     console.log("连接关闭，且已超过最大重连次数，不再重连");                }        };        return this;    },    on:function(command , func){        cc.beimi.event[command] =  func ;    },    exec:function(command , res){        if (this.ws.readyState === WebSocket.OPEN) {            var data = {                event:command,                token:cc.beimi.token,                data:res            }            this.ws.send(JSON.stringify(data));        }    },    emit:function(command , data){        let param = {            data : data        } ;        this.exec(command , param) ;    },    disconnect:function(){    },    parse:function(result){        return JSON.parse(result) ;    },});